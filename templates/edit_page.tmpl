{{define "edit_page"}}
 {{template "header" .}}

  <div class="row">
   <div class="twelve columns">    
    <label for="enableComments">
     <span class="label-body">Page title</span><br/>
     <input type="text" id="pageTitle" value="{{.Article.Title}}">
    </label>
   </div>
  </div>

  <div class="row">
   <div class="twelve columns" id="editor"></div>
  </div> 

  <div class="row">
   <div class="six columns">
    <label for="enableComments">
     <input type="checkbox" class="checkbox" name="comments" {{if .Article.Comments}}checked{{end}} value="comments" id="enableComments">
     <span class="label-body">Enable Comments</span>
   </label><br/>
  </div>

  </div>
  <div class="row">
   <div class="twelve columns">
   <button id="cancel">cancel</button>
    <button id="submit">submit</button>
   </div>
  </div>

  <script>
(function(){

	var dropzone = document.getElementById('dropzone');
	var submit = document.getElementById('submit');
	var cancel = document.getElementById('cancel');

	var myCodeMirror = CodeMirror(document.getElementById('editor'), {
		value: "{{.Article.Markdown}}",
  		mode:  "markdown",
		theme: "monokai",
		dragDrop: false
	});
	
	console.log(myCodeMirror);

	var upload = function(files) {
		var formData = new FormData();
		for (var i = 0; i < files.length; i++) {
		  formData.append('files', files[i]);
		}

		// now post a new XHR request
		var xhr = new XMLHttpRequest();
		xhr.open('POST', '/img/upload');
		xhr.onload = function () {
		  console.log(xhr.responseText);
		  if (xhr.status === 200) {
		    response = JSON.parse(xhr.responseText);
			if (response.status === "ok") {
				console.log(response);
				for (var i = 0; i < response.urls.length; i++) {
					var newString = "![" + response.urls[i] + "](" + response.urls[i] + ")\n";
					myCodeMirror.doc.replaceSelection(newString);
				}
			}
		  } 
		};
		xhr.send(formData);
	}

	dropzone.ondrop = function(e) {
		e.preventDefault();
		upload(e.dataTransfer.files);
		return false;
	}

	dropzone.ondragover = function() {
		return false;
	}

	dropzone.ondragleave = function() {
		return false;
	}

	submit.onclick = function () {
		var content = {};
		content.markdown = myCodeMirror.doc.getValue();
		content.comments = document.getElementById('enableComments').checked.toString();
		content.title = document.getElementById('pageTitle').value;
		submitEditor(content);
		return false;
	}
	cancel.onclick = function () {
		window.location.href = "./";
		return false;
	}

	var submitEditor = function(content) {
		var xhr = new XMLHttpRequest();   // new HttpRequest instance 
		xhr.open("POST", "/a/{{.Article.Id}}/edit");
		xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
		xhr.onload = function () {
		  console.log(xhr.responseText);
		  if (xhr.status === 200) {
		    response = JSON.parse(xhr.responseText);
			if (response.status === "ok") {
			  window.location.href = response.url;
			}
		  } 
		};
		xhr.send(JSON.stringify(content));
	}

}());
  </script>

 {{template "footer" .}}
{{end}}
